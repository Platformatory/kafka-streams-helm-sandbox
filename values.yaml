kube-prometheus-stack:
  prometheus:
    prometheusSpec:
      ## Do not modify `serviceMonitorSelectorNilUsesHelmValues`
      serviceMonitorSelectorNilUsesHelmValues: false
      ## set remoteWrite configuration for sending metrics to a backend that supports Prometheus remote write
      ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#remotewritespec
      ## example for New Relic
      ##
      # remoteWrite:
      # - url: https://metric-api.newrelic.com/prometheus/v1/write?prometheus_server=kafka-streams-sandbox
      #   bearerToken: xxxxxxxxxxxxxxxxxxxxxxx
    ingress:
      enabled: false
      ## IngressClassName for Prometheus Ingress.
      ## Should be provided if Ingress is enable.
      # ingressClassName: nginx
      annotations: {}
      labels: {}

      ## Hostnames.
      ## Must be provided if Ingress is enabled.
      # hosts:
      #   - prometheus.domain.com
      hosts: []

      ## Paths to use for ingress rules - one path should match the prometheusSpec.routePrefix
      ##
      paths: []
      # - /

      ## For Kubernetes >= 1.18 you should specify the pathType (determines how Ingress paths should be matched)
      ## See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#better-path-matching-with-path-types
      # pathType: ImplementationSpecific

      ## TLS configuration for Prometheus Ingress
      ## Secret must be manually created in the namespace
      ##
      tls: []
        # - secretName: prometheus-general-tls
        #   hosts:
        #     - prometheus.example.com
    

  grafana:
    ## Set to false if you're using an external monitoring tool and do not need Grafana through helm
    enabled: true
    adminPassword: platformatory
    ## Do not delete `streams: streams-dashboard`
    dashboardsConfigMaps:
      streams: streams-dashboard
    ingress:
      ## If true, Grafana Ingress will be created
      enabled: false

      ## IngressClassName for Grafana Ingress.
      ## Should be provided if Ingress is enable.
      # ingressClassName: nginx

      ## Annotations for Grafana Ingress
      annotations: {}
        # kubernetes.io/ingress.class: nginx
        # kubernetes.io/tls-acme: "true"

      ## Labels to be added to the Ingress
      labels: {}

      ## Hostnames.
      ## Must be provided if Ingress is enable.
      # hosts:
      #   - grafana.domain.com
      hosts: []

      ## Path for grafana ingress
      path: /

      ## TLS configuration for grafana Ingress
      ## Secret must be manually created in the namespace or using cert-manager
      tls: []
      # - secretName: grafana-general-tls
      #   hosts:
      #   - grafana.example.com


streams:
  replicas: 1
  image: 
  # image: username/kafka-streams:1.0
  env:
  - name: INPUT_TOPIC
    value: input-topic
  configProperties:
    # properties: |
    #   application.id=word-count
    #   bootstrap.servers=pkc-xxxxx.us-west4.gcp.confluent.cloud:9092
    #   security.protocol=SASL_SSL
    #   sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username='XXXXXXXXXXXXXXXX' password='YYYYYYYYY+YYYYYYY/YYYYYYYYYYYYYYY/YYYYYYYYYYYYYYYYYYYYYYYYYYYYYY';
    #   sasl.mechanism=PLAIN
    #   auto.reset.config=earliest
    #   input.topic.name=word-count-input
    #   output.topic.name=word-count-output
    # filename: streams.properties
    # path: /etc/config
  statefulData:
    enabled: false
    path: /data/data-source
    storage: 1Gi
    storageClassName: ""
  build:
    # destination: avinashupadhya99/kafka-streams-word-count:kaniko-helm-env-3
    # jar_url: https://word-count-jar-repository.s3.amazonaws.com/word-count-1.0-SNAPSHOT-jar-with-dependencies.jar
    # java_classpath: com.platformatory.kafka.streams.WordCount
    # jar_args: /etc/config/streams.properties
    # pushSecretData:
    #   registry: https://index.docker.io/v1/
    #   username: avinashupadhya99
    #   password: Qmwnebrvtc99!d

